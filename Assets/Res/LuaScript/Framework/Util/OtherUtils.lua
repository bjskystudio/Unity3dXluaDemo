---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wyx.
--- DateTime: 2019/11/5 11:06
---逻辑无关支撑性质公共函数

local Logger = lazyRequire("Logger")
local json = require("json")

local tonumber = tonumber

--- 随机函数 包含最大值 最小值
---@param min number 最小值（包含）
---@param max number 最大值（包含）
function _G.GetRandomNum(min, max)
    math.randomseed(tostring(os.time()):reverse():sub(1, 7))
    return math.random(min, max)
end

-- 格式化 字符串  num 为长度   不够 为前面加几个0
function _G.AddZeroForNum(str, num)
    if num == nil then
        num = 4
    end

    local len = string.len(tostring(str))
    local ret = tostring(str)

    for _ = 1, (num - len) do
        ret = "0" .. ret
    end
    return ret
end

-- 把1970.1.1至今的秒数，转化为年月日，时分
-- endTime单位毫秒
function _G.GetTimeFormat(endTime)
    return os.date("%Y-%m-%d  %H:%M:%S", math.floor(endTime / 1000))
end

-- 把1970.1.1至今的秒数，转化为年月日，时分
-- endTime单位秒
function _G.GetTimeFormatBySecond(endTime)
    return os.date("%Y-%m-%d  %H:%M:%S", math.floor(endTime))
end

-- table是否为空
function _G.TableIsEmpty(t)
    return _G.next(t) == nil
end

-- bool值转(0,1)
function _G.BoolToNumber(bool)
    if type(bool) ~= "boolean" then
        Logger.Error("请输入boolean类型 " .. Logger.dump(bool))
    end
    return bool and 1 or 0
end

-- 检查并尝试转换为布尔值，除了 nil 和 false，其他任何值都会返回 true
function _G.CheckBool(value)
    return (value ~= nil and value ~= false)
end

-- 检查并尝试转换为数值，如果无法转换则返回 默认值
function _G.CheckNumber(value, default)
    default = default or 0
    return tonumber(value) or default
end

-- 检查值是否是一个表格，如果不是则返回一个空表格
function _G.CheckTable(value)
    if type(value) ~= "table" then
        value = {}
    end
    return value
end

--迭代器,对key进行了排序
function _G.pairsByKeys(t)
    local a = {}

    for n in pairs(t) do
        a[#a + 1] = n
    end

    table.sort(a)
    local i = 0
    return function()
        i = i + 1
        if i <= #a then
            return a[i], t[a[i]]
        end
    end
end

function _G.getIntPart(x)
    if x <= 0 then
        return math.ceil(x)
    end
    if math.ceil(x) == x then
        x = math.ceil(x)
    else
        x = math.ceil(x) - 1
    end
    return x
end

local type = type
local typeof = _G.typeof
local CS = _G.CS

local CSUIGoTable = typeof(CS.UIGoTable)
---修改go_table组件中的状态
---@param node UnityEngine.GameObject 窗口预制体
function _G.SetGoTableState(node, stateName)
    assert(type(node) == "userdata", "类型不正确" .. type(node))
    local comp = node:GetComponent(CSUIGoTable)
    if _G.IsNil(comp) then
        Logger.LogFatal("%s 未挂载 UIGoTable 组件", node.name)
    else
        comp:ChangeState(stateName)
    end
end

---获取go_table组件
---@param node UnityEngine.GameObject 窗口预制体
---@param onClickBtn fun(btn: AorButton) 点击回调
---@param onClickToggle fun(toggle:UnityEngine.UI.Toggle, isOn:boolean) 点击回调
function _G.GetAutoGoTable(node, onClickBtn, onClickToggle)
    assert(type(node) == "userdata", "类型不正确" .. type(node))
    local comp = node:GetComponent(CSUIGoTable)
    if _G.IsNil(comp) then
        Logger.LogFatal("%s 未挂载 UIGoTable 组件", node.name)
    else
        local tbl = comp:CreateLuaGoTable()
        if (onClickBtn ~= nil) then
            tbl["_onClickBtn"] = onClickBtn
        end
        if (onClickToggle ~= nil) then
            tbl["_onClickToggle"] = onClickToggle
        end
        return tbl
    end
    return {}
end

---获取go_table组件(没有则返回nil)
---@param node UnityEngine.GameObject 窗口预制体
---@param onClickBtn fun(btn: AorButton) 点击回调
---@param onClickToggle fun(toggle:UnityEngine.UI.Toggle, isOn:boolean) 点击回调
function _G.GetAutoGoTableOrNil(node, onClickBtn, onClickToggle)
    assert(type(node) == "userdata", "类型不正确" .. type(node))
    local comp = node:GetComponent(CSUIGoTable)
    if not _G.IsNil(comp) then
        local tbl = comp:CreateLuaGoTable()
        if (onClickBtn ~= nil) then
            tbl["_onClickBtn"] = onClickBtn
        end
        if (onClickToggle ~= nil) then
            tbl["_onClickToggle"] = onClickToggle
        end
        return tbl
    end
    return nil
end

---针对view 的goTable添加按钮侦听
---@param node UnityEngine.GameObject 窗口预制体
---@param onClickBtn fun(btn: AorButton) 点击回调
---@param onClickToggle fun(toggle:UnityEngine.UI.Toggle, isOn:boolean) 点击回调
function _G.AddViewBtnClick(node, onClickBtn, onClickToggle)
    _G.Guard.NotNull(node, "node is null")
    _G.Guard.NotNull(onClickBtn, "onclick is null")
    local comp = node.transform:GetComponent(CSUIGoTable)
    local tbl = comp:GetLuaGoTable()
    _G.Guard.NotNull(comp, string.format("%s 未挂载UIGoTable组件", node.transform.name))
    if (onClickBtn ~= nil) then
        tbl["_onClickBtn"] = onClickBtn
    end
    if (onClickToggle ~= nil) then
        tbl["_onClickToggle"] = onClickToggle
    end
end

--将一个C# 的List<object>数据转换成一个table
function _G.List2Table(list)
    local tbl = {}
    local iter = list:GetEnumerator()

    while iter:MoveNext() do
        table.insert(tbl, iter.Current)
    end

    return tbl
end

--将一个C# 的Dictionary<string,object>数据转换成一个table
function _G.Dic2Table(dic)
    local tbl = {}
    local iter = dic:GetEnumerator()

    while iter:MoveNext() do
        local k = iter.Current.Key
        local v = iter.Current.Value
        tbl[k] = v
    end

    return tbl
end

--将一个json数据转换成table，并将其中的可以转换成数字的字符串转换成数字
function _G.Json2Table(jsonData)
    local result = {}

    for i, v in pairs(json.decode(jsonData)) do
        if tonumber(v) then
            result[i] = tonumber(v)
        else
            result[i] = v
        end
    end

    return result
end

--给指定UI添加一个事件监听器，并设置对应监听事件的响应
function _G.SetEventTrigger(go, eventName, func, penetrate)
    if penetrate == nil then
        penetrate = false
    end

    go = go.gameObject
    local eventTriggerType = _G.eEventTriggerType[eventName]
    if (eventTriggerType) then
        --LogError(go)
        --LogError(eventTriggerType)
        --LogError(func)
        --LogError(penetrate)
        _G.LuaEventTriggerListener.SetEventTriggerListenerEvent(go, eventTriggerType, func, penetrate)
    end
end

---删除事件
---@param go UnityEngine.GameObject
---@param eventTriggerType eEventTriggerType
function _G.RemoveEventTrigger(go, eventTriggerType)
    go = go.gameObject
    _G.LuaEventTriggerListener.RemoveEventTriggerListenerEvent(go, eventTriggerType)
end

--延迟一帧执行
function _G.DelayDofframe(func)
    local cor
    cor = _G.coroutine.start(function()
        _G.coroutine.waitforendofframe()
        _G.coroutine.stopwaiting(cor)
        if (func) then
            func()
        end
    end)

    return cor
end

--[[
--延时一定时间（秒），执行方法
seconds延时时间
func 延时后执行的函数
ignoreTimeScale 是否忽略TimeScale
--]]
function _G.DelayDo(seconds, func)
    local cor
    cor = _G.coroutine.start(function()
        _G.coroutine.waitforseconds(seconds)
        _G.coroutine.stopwaiting(cor)
        if (func) then
            func()
        end
    end)

    return cor
end

--[[
--延时一定时间（秒），执行方法
seconds延时时间
func 延时后执行的函数
ignoreTimeScale 是否忽略TimeScale
--]]
function _G.CSDelayDo(go, seconds, func)
    return _G.CSGameUtility.DelayDo(go, seconds, func)
end

---CreatEnumTable 创建枚举table
---@param tbl table 枚举Key值表
---@param index number 起始数字索引,index为null则为字符类型枚举
function _G.CreateEnumTable(tbl, index)
    local enumtbl = {}
    local enumindex = index

    for i, v in pairs(tbl) do
        if (enumindex ~= nil) then
            enumtbl[v] = enumindex + i - 1
        else
            enumtbl[v] = v
        end
    end
    return enumtbl
end

---包装一下获取属性字段枚举
---@param attrType string 属性名字
---@return number 属性编号
function _G.GetAttrEunm(attrType)
    local eAttrType = require("GlobalDefine").eAttrType
    local value = eAttrType[attrType]
    if value then
        return value
    else
        LogWarning("异常属性字段>>>>>>" .. attrType)
        return eAttrType["attack"]
    end
end

---反向获取属性类型字符串
---@param attrIndex number 属性编号
---@return string 属性类型字符串，字母的，不是名字
function _G.GetAttrStrByIndex(attrIndex)
    local eAttrType = require("GlobalDefine").eAttrType
    for key, index in pairs(eAttrType) do
        if index == attrIndex then
            return key
        end
    end
    ---错误的属性编号
    return "errorAttrIndex"
end

---只读
function _G.read_only(inputTable)
    local travelled_tables = {}

    local function __read_only(tbl)
        if not travelled_tables[tbl] then
            local tbl_mt = getmetatable(tbl)
            if not tbl_mt then
                tbl_mt = {}
                setmetatable(tbl, tbl_mt)
            end

            local proxy = tbl_mt.__read_only_proxy
            if not proxy then
                proxy = {}
                tbl_mt.__read_only_proxy = proxy
                local proxy_mt = {
                    __index = tbl,
                    __newindex = function(t, k, v)
                        error("error write to a read-only table with key = " .. tostring(k))
                    end,
                    __pairs = function(t)
                        return pairs(tbl)
                    end,
                    -- __ipairs = function (t) return ipairs(tbl) end, 5.3版本不需要此方法
                    __len = function(t)
                        return #tbl
                    end,
                    __read_only_proxy = proxy
                }
                setmetatable(proxy, proxy_mt)
            end

            travelled_tables[tbl] = proxy

            for k, v in pairs(tbl) do
                if type(v) == "table" then
                    tbl[k] = __read_only(v)
                end
            end
        end
        return travelled_tables[tbl]
    end
    return __read_only(inputTable)
end
