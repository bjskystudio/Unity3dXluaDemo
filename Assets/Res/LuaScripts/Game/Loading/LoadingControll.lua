---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sl.
--- DateTime: 2021/6/7 16:56
local EventManager = require("EventManager")
local EventID = require("EventID")
local ModuleStartupManager = require("ModuleStartupManager")
local WorldManager = require("WorldManager")
local UIManager = require("UIManager")
local ConfigManager = require("ConfigManager")
local TimerManager = require("TimerManager")
local PlayerManager = require("PlayerManager")
--local BattleManager = require("BattleManager")
local LoginManager = require("LoginManager")
local eLoginState = require("GlobalDefine").eLoginState
local AssetLoadManager = require("AssetLoadManager")

--region ------------- 流程基类 -------------

---@class BaseLoadingClip 流程基类
---@field isOver boolean
local BaseLoadingClip = Class("BaseLoadingClip")

function BaseLoadingClip:IsOver()
    return true
end

function BaseLoadingClip:Run()
end

--endregion ----------- 流程基类 end -----------

--region ------------- 打开Loading界面 -------------

---@class OpenLoadingClip:BaseLoadingClip 打开Loading界面
local OpenLoadingClip = Class("OpenLoadingClip", BaseLoadingClip)

function OpenLoadingClip:IsOver()
    if self.view == nil then
        --窗口已经打开
        return true
    end
    return not self.view.isloading
end

function OpenLoadingClip:Run()
    self.view = self.LoadingView
end

--endregion ----------- 打开Loading界面 end -----------

--region ------------- 关闭登录界面 -------------

---@class CloseLoginViewClip:BaseLoadingClip 关闭登录界面
---@field private view LoadingView
local CloseLoginViewClip = Class("CloseLoginViewClip", BaseLoadingClip)

function CloseLoginViewClip:IsOver()
    return true
end

function CloseLoginViewClip:Run()
    if UIManager:GetInstance():IsWindowOpened(ConfigManager.UIConfig.LoginView.Name) then
        UIManager:GetInstance():CloseWindow(ConfigManager.UIConfig.LoginView.Name)
    end
end

--endregion ----------- 关闭登录界面 end -----------

--region ------------- 正常登录获取用户数据流程 -------------

---@class GetUserDataClip:BaseLoadingClip 正常登录获取用户数据流程
local GetUserDataClip = Class("GetUserDataClip", BaseLoadingClip)

function GetUserDataClip:IsOver()
    if ModuleStartupManager:GetInstance():IsDone() then
        return true
    end
    return false
end

function GetUserDataClip:Run()
    ModuleStartupManager:GetInstance():StartInitData(false, nil)
end

--endregion ----------- 正常登录获取用户数据流程 end -----------

--region ------------- 切换场景 -------------

---@class LoadSceneClip:BaseLoadingClip 切换场景
---@field wm WorldManager
local LoadSceneClip = Class("LoadSceneClip", BaseLoadingClip)

function LoadSceneClip:IsOver()
    return not self.wm.isloading
end

function LoadSceneClip:Run()
    self.wm = WorldManager:GetInstance()
    self.wm:LoadScene()
end

--endregion ----------- 切换场景 end -----------

--region -------------尝试加载场景（判断战斗重连）-------------
---@class TryLoadSceneByJudgeBattleClip:BaseLoadingClip 尝试加载场景（判断战斗重连）
---@field wm WorldManager
--local TryLoadSceneByJudgeBattleClip = Class("TryLoadSceneByJudgeBattleClip", BaseLoadingClip)
--
--function TryLoadSceneByJudgeBattleClip:IsOver()
--    return self.wm == nil or (not self.wm.isloading)
--end
--
--function TryLoadSceneByJudgeBattleClip:Run()
--    if BattleManager:GetInstance().IsReLoadBattle == false then
--        self.wm = WorldManager:GetInstance()
--        self.wm:LoadScene()
--    end
--end

--endregion

--region ------------- 打开主界面 -------------

---@class OpenMainViewClip:BaseLoadingClip 打开主界面
---@field view BaseUIView
local OpenMainViewClip = Class("OpenMainViewClip", BaseLoadingClip)

function OpenMainViewClip:IsOver()
    return self.view:IsAvalible()
end

function OpenMainViewClip:Run()
    self.view = UIManager:GetInstance():OpenWindow(ConfigManager.UIConfig.MainView.Name)
    PlayerManager:GetInstance():SendPlayerInfoToSDK(2)
    EventManager:GetInstance():Broadcast(EventID.LoginStateChanged, eLoginState.EnterGame)
end

--endregion ----------- 打开主界面 end -----------

--region ------------- 重新登录流程 -------------

---@class ReGetUserDataClip:BaseLoadingClip 正常登录获取用户数据流程
local ReGetUserDataClip = Class("GetUserDataClip", BaseLoadingClip)

function ReGetUserDataClip:IsOver()
    if ModuleStartupManager:GetInstance():IsDone() then
        return true
    end
    return false
end

function ReGetUserDataClip:Run()
    ModuleStartupManager:GetInstance():StartInitData(true, nil)
end

---@class ReLoginFinishClip:BaseLoadingClip 重登结束
---@field view BaseUIView
local ReLoginOverClip = Class("ReLoginOverClip", BaseLoadingClip)

function ReLoginOverClip:IsOver()
    return true
end

function ReLoginOverClip:Run()
    PlayerManager:GetInstance():SendPlayerInfoToSDK(2)
    EventManager:GetInstance():Broadcast(EventID.LoginStateChanged, eLoginState.ReEnterGame)
end

--endregion ----------- 重新登录流程 end -----------

--region -------------打开战斗界面-------------
--local OpenBattleViewClip = Class("OpenBattleViewClip", BaseLoadingClip)
--function OpenBattleViewClip:IsOver()
--    return self.view.IsLoaded
--end
--function OpenBattleViewClip:Run()
--    self.view = UIManager:GetInstance():OpenWindow(ConfigManager.UIConfig.BattleView.Name)
--    BattleManager:GetInstance():StartBattle(self.view)
--end
--endregion----------- 打开战斗界面 end -----------

--region -------------打开战斗界面-------------
--local TryOpenBattleViewByJudgeBattleClip = Class("TryOpenBattleViewByJudgeBattleClip", BaseLoadingClip)
--function TryOpenBattleViewByJudgeBattleClip:IsOver()
--    return self.bManager == nil or self.bManager:IsReLoadComplete()
--end
--function TryOpenBattleViewByJudgeBattleClip:Run()
--    if BattleManager:GetInstance().IsReLoadBattle == true then
--        self.view = UIManager:GetInstance():OpenWindow(ConfigManager.UIConfig.BattleView.Name)
--        self.bManager = BattleManager:GetInstance()
--        self.bManager:StartBattle(self.view)
--    end
--end
--endregion----------- 打开战斗界面 end -----------

--region -------------销毁战斗-------------
-----@class DestroyBattleClip:BaseLoadingClip 销毁战斗
--local DestroyBattleClip = Class("DestroyBattleClip", BaseLoadingClip)
--function DestroyBattleClip:IsOver()
--    return true
--end
--
--function DestroyBattleClip:Run()
--    BattleManager:GetInstance():ExitBattle()
--end
--endregion

--region -------------重连战斗-------------
-----@class ReLoadBattleClip:BaseLoadingClip 重连战斗
--local ReLoadBattleClip = Class("ReLoadBattleClip", BaseLoadingClip)
--function ReLoadBattleClip:IsOver()
--    return self.bManager:IsLoadComplete()
--end
--
--function ReLoadBattleClip:Run()
--    self.bManager = BattleManager:GetInstance()
--    self.bManager:ReqReLoadBattle()
--end
--endregion

--region -------------关闭非主窗口的所有界面-------------
local CloseAllExceptMainClip = Class("CloseAllExceptMainClip", BaseLoadingClip)
function CloseAllExceptMainClip:IsOver()
    return true
end
function CloseAllExceptMainClip:Run()
    --UIManager:GetInstance():CloseAllExceptMainWindow()
end
--endregion----------- 关闭非主窗口的所有界面 end -----------

--region -------------销毁当前场景-------------
---@class DestroyCurrentWorld:BaseLoadingClip 销毁当前场景
local DestroyCurrentWorld = Class("DestroyCurrentWorld", BaseLoadingClip)
function DestroyCurrentWorld:IsOver()
    return true
end
function DestroyCurrentWorld:Run()
    WorldManager:GetInstance():DestroyCurrentWorld()
end
--endregion-----------销毁当前场景 end-------------

--region -------------加载战斗资源-------------
-----@class LoadBattleClip:BaseLoadingClip 加载战斗场景
--local LoadBattleClip = Class("LoadBattleClip", BaseLoadingClip)
--function LoadBattleClip:IsOver()
--    if BattleManager:GetInstance():IsLoadComplete() then
--        return true
--    end
--    return false
--end
--function LoadBattleClip:Run()
--    BattleManager:GetInstance():LoadAllBattle()
--end
--endregion----------- 加载战斗资源 end -----------

---@class loadingControllType 流程控制类型
local loadingControllType = {
    ---重登
    ReEnterGame = {
        { ReGetUserDataClip, 50 },
        { ReLoginOverClip, 100 },
        --{ ReLoadBattleClip, 80 },
        --{ TryOpenBattleViewByJudgeBattleClip, 100 },
    },
    ---登录游戏
    EnterGame = {
        { CloseLoginViewClip, 0 },
        { OpenLoadingClip, 0 },
        { GetUserDataClip, 20 },
        --{ ReLoadBattleClip, 40 },
        --{ TryLoadSceneByJudgeBattleClip, 60 },
        { OpenMainViewClip, 100 },
        --{ TryOpenBattleViewByJudgeBattleClip, 100 },
    },
    ---切换场景
    ChangeScene = {
        { OpenLoadingClip, 0 },
        { LoadSceneClip, 100 },
    },
    ---进入战斗
    EnterBattle = {
        { CloseAllExceptMainClip, 0 },
        { OpenLoadingClip, 10 },
        { DestroyCurrentWorld, 20 },
        --{ LoadBattleClip, 80 },
        --{ OpenBattleViewClip, 100 },
    },
}
---@class LoadingControll
---@field Steps loadingControllType
---@field LoadingView LoadingView
---@field sceneid number
local LoadingControll = Class("LoadingControll")
---流程控制类型
LoadingControll.loadingControllType = loadingControllType

---@param steps loadingControllType
---@param sceneid number
function LoadingControll.Start(steps, sceneid)
    return LoadingControll.New(steps, sceneid)
end

---@param steps loadingControllType
function LoadingControll:__init(steps, sceneid)
    self.Steps = steps
    self.LoadingView = UIManager:GetInstance():OpenWindow(ConfigManager.UIConfig.LoadingView.Name, self)
    self.MaxStepCount = #steps
    self.CurrentStepIndex = 1
    ---@type BaseLoadingClip
    self.CurrentStep = nil
    self.Timer = TimerManager:GetInstance():GetTimer(1, self.UpdateShow, self, false, true)
    self.Timer:Start()
end

---@private
function LoadingControll:UpdateShow()
    if IsNil(self) then
        Logger.Error("停止了还在跑Loading")
        return
    end
    if self.CurrentStep == nil then
        self.CurrentStep = self.Steps[self.CurrentStepIndex][1].New()
        self.CurrentStep:Run()
    end
    if not self.CurrentStep:IsOver() then
        return
    end
    local progress = self.Steps[self.CurrentStepIndex][2]
    if progress > 0 then
        self.LoadingView:SetProgress(progress)
    end
    self.CurrentStepIndex = self.CurrentStepIndex + 1
    if self.CurrentStepIndex <= self.MaxStepCount then
        self.CurrentStep = self.Steps[self.CurrentStepIndex][1].New()
        self.CurrentStep:Run()
    else
        AssetLoadManager:GetInstance():ReleaseInIdle()
        self:LoadOver()
    end
end

--加载完成
function LoadingControll:LoadOver()
    self.Timer:Stop()
    self.Timer = nil
    self.CurrentStep = nil
    self.LoadingView = nil
    self.Steps = nil
    LoginManager:GetInstance().CurLoadingControll = nil
end

---@return LoadingControll
return LoadingControll